/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tokyo;

import com.itextpdf.text.DocumentException;
import java.awt.Color;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import pdf.PDFgenerator;

/**
 *
 * @author Orlandi
 */
public class Report extends javax.swing.JFrame {
    
    private JTable tableAthlete=  new javax.swing.JTable();
    
    private PDFgenerator pdf;
    
    private static final String reportAthletePath = ".\\athlete.pdf";

    /**
     * Creates new form Report
     */
    public Report() {
        initComponents();
        this.setTitle("Tokyo++ - Athlete report");
        this.setIconImage(new ImageIcon(getClass()
                .getResource("/img/japan.png"))
                .getImage()); 
        this.setLocationRelativeTo(null);
        
        pdf = new PDFgenerator();
        
        loadAtleta();
        
        labelSuccess.setVisible(false);
    }
    
    private void loadAtleta() {
        paneAtleta.setViewportView(tableAthlete);
        tableAthlete.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID", "Athlete name", "Matches played"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false
            };
        });
        
        try {
            ResultSet resultSet = DatabaseConnection
                    .getInstance()
                    .select(scriptAtleta());
                    
            DefaultTableModel model = (DefaultTableModel) tableAthlete.getModel();
            
            while (resultSet.next()) {
                model.addRow(new Object[]{
                    resultSet.getString("codigo"),
                    resultSet.getString("nomeParticipante"),
                    resultSet.getString("QuantidadesJogo")});
            }
        } catch(SQLException ex) {
            System.err.println(ex.getMessage());
        }
    }
    
    private String scriptAtleta() {
        return "select A.codigo, A.nomeParticipante, count(B.codigo) as QuantidadesJogo "
                + "from Atleta A join Participa P "
                + "on A.codigo = P.codigo "
                + "join Equipe E "
                + "on E.numero = P.numero "
                + "and E.nomePais = P.nomePais "
                + "and E.nomeEsporte = P.nomeEsporte "
                + "and E.nomeModalidade = P.nomeModalidade "
                + "join Compete B "
                + "on E.numero = B.numero "
                + "and E.nomePais = B.nomePais "
                + "and E.nomeEsporte = B.nomeEsporte "
                + "and E.nomeModalidade = B.nomeModalidade "
                + "group by A.codigo,A.nomeParticipante "
                + "having count(B.codigo) >= 3";

    }
    
    private void insertTable(JTable table) throws DocumentException {
        String[] header = new String[table.getColumnCount()];
        
        for(int i = 0; i < table.getColumnCount(); i++) {
            header[i] = table.getColumnName(i);
        }
        
        pdf.newHeaderTable(header);
        
        String[] field;
        
        for(int i = 0; i < table.getRowCount(); i++) {
            field = new String[table.getColumnCount()];
            
            for(int j = 0; j < table.getColumnCount(); j++) {
                field[j] = table.getValueAt(i,j).toString();
            }
            
            pdf.newLineTable(field);
        }
        
        pdf.finishTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneAtleta = new javax.swing.JScrollPane();
        jPanel = new javax.swing.JPanel();
        labelReportAtleta = new javax.swing.JLabel();
        buttonPdf = new javax.swing.JButton();
        labelSuccess = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 366, Short.MAX_VALUE)
        );

        paneAtleta.setViewportView(jPanel);

        labelReportAtleta.setFont(new java.awt.Font("Source Sans Pro Semibold", 0, 11)); // NOI18N
        labelReportAtleta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReportAtleta.setText("All athletes that participated in three or more distinct matches, with the total number of matches played");

        buttonPdf.setFont(new java.awt.Font("Source Sans Pro Semibold", 0, 18)); // NOI18N
        buttonPdf.setText("Generate PDF");
        buttonPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPdfActionPerformed(evt);
            }
        });

        labelSuccess.setFont(new java.awt.Font("Source Sans Pro Semibold", 0, 14)); // NOI18N
        labelSuccess.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSuccess.setText("label ");
        labelSuccess.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paneAtleta)
                    .addComponent(buttonPdf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelReportAtleta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelSuccess, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelReportAtleta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paneAtleta, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonPdf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelSuccess, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPdfActionPerformed
        try {
            pdf.newFile(reportAthletePath);
            
            /* get system date */
            String schedule = new SimpleDateFormat("HH:mm:ss")
                    .format(Calendar.getInstance().getTime());
            String date = new SimpleDateFormat("dd/MM/yyyy")
                    .format(Calendar.getInstance().getTime());
            
            pdf.insertParagraph(labelReportAtleta.getText() + ".");
            
            pdf.insertParagraph("Generated at " + schedule + " - " + date + ".");
            pdf.insertParagraph(" ");
            
            insertTable(tableAthlete);
            
            pdf.closeFile();
            
            pdf.readFile(reportAthletePath);
            
            labelSuccess.setText("Report file created in " + reportAthletePath);
            labelSuccess.setForeground(Color.BLUE);
            labelSuccess.setVisible(true);
        } catch(DocumentException | IOException ex) {
            System.err.println(ex.getMessage());
            labelSuccess.setText("Fail: " + ex.getMessage());
            labelSuccess.setForeground(Color.RED);
            labelSuccess.setVisible(true);
        }
    }//GEN-LAST:event_buttonPdfActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPdf;
    private javax.swing.JPanel jPanel;
    private javax.swing.JLabel labelReportAtleta;
    private javax.swing.JLabel labelSuccess;
    private javax.swing.JScrollPane paneAtleta;
    // End of variables declaration//GEN-END:variables
}
